/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.example.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.example.language.CURLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_CURLLexer.flex</tt>
 */
public class _CURLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\172\3\1\6\77\3");

  /* The ZZ_CMAP_A table has 448 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\4\2\22\0\1\3\1\16\1\24\1\21\1\0\2\21\1\22\3\0\1\21\1\16\1\36\1\16"+
    "\1\15\12\35\1\14\1\16\1\0\1\21\1\0\1\16\1\21\1\37\1\21\1\62\1\42\1\13\1\10"+
    "\1\50\1\4\1\20\2\21\1\12\1\21\1\40\1\60\1\6\1\56\1\46\1\17\1\5\1\44\2\21\1"+
    "\54\1\52\1\35\1\0\1\23\2\0\1\35\1\0\1\37\1\35\1\63\1\43\1\32\1\30\1\51\1\25"+
    "\1\34\2\35\1\31\1\35\1\41\1\61\1\27\1\57\1\47\1\33\1\26\1\45\2\35\1\55\1\53"+
    "\1\35\1\0\1\21\1\0\1\21\6\0\1\1\252\0\2\11\115\0\1\7\50\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\7\2\5\1\2\2\1\1\1\2"+
    "\1\1\1\2\1\1\1\2\1\1\7\0\1\4\1\0"+
    "\1\5\3\0\7\1\1\6\1\0\1\6\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\3\0\1\7\2\0\5\1"+
    "\10\0\1\1\1\0\1\1\2\0\2\1\3\0\2\1"+
    "\10\0\1\1\1\0\1\1\1\10\1\0\1\10\1\1"+
    "\10\0\1\1\1\0\1\1\3\0\1\6\4\0\1\1"+
    "\6\0\1\11\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u01a0\0\64\0\u0680\0\u01d4\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\64\0\u0854\0\u0888\0\u08bc"+
    "\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c"+
    "\0\u0a90\0\u0ac4\0\64\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\64\0\u12b0\0\u02d8\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1728"+
    "\0\u1860\0\u1894\0\u18c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\1\2\1\7\4\2"+
    "\1\10\4\2\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\5\17\1\20\1\17\1\2\1\17\1\21\1\22"+
    "\1\2\1\17\1\2\1\17\1\23\1\24\1\2\1\17"+
    "\1\2\1\17\1\2\1\17\1\25\1\26\1\27\1\30"+
    "\66\0\2\3\65\0\1\31\5\0\1\32\12\0\1\31"+
    "\3\0\1\32\77\0\2\33\60\0\2\34\12\0\2\35"+
    "\7\0\1\36\3\0\1\37\6\0\1\37\5\0\1\36"+
    "\5\0\1\37\44\0\1\40\46\0\22\41\1\42\1\43"+
    "\40\41\23\44\1\45\1\42\37\44\5\0\1\31\5\0"+
    "\1\32\11\0\1\17\1\46\3\17\1\47\3\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\25\0\11\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\33"+
    "\1\50\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\25\0\11\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\34\1\51\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\35\1\52\1\0\1\17\5\0\1\36\3\0"+
    "\1\37\6\0\1\37\4\0\1\17\1\53\5\17\1\54"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\25\0"+
    "\11\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\1\55\20\0\1\55\10\0\1\56\1\57\4\0\2\55"+
    "\2\0\2\55\2\0\2\55\2\0\2\55\15\0\1\60"+
    "\16\0\1\60\44\0\1\60\11\0\5\17\1\61\3\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\13\0\1\34"+
    "\16\0\1\34\44\0\1\34\11\0\5\17\1\51\3\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\6\0\1\62"+
    "\20\0\1\62\42\0\1\62\16\0\2\17\1\63\6\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\44\0\2\64"+
    "\12\0\2\65\27\0\11\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\64\1\66\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\65\1\67"+
    "\1\0\1\17\5\0\1\70\20\0\1\70\74\0\1\71"+
    "\63\0\1\72\31\0\1\73\20\0\1\73\44\0\1\34"+
    "\7\0\1\34\13\0\1\34\36\0\1\74\20\0\1\74"+
    "\46\0\1\75\16\0\1\75\32\0\1\40\2\0\61\40"+
    "\1\41\2\0\61\41\1\44\2\0\61\44\5\0\1\70"+
    "\17\0\1\17\1\76\7\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\25\0\11\17\1\0\1\77\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\25\0\11\17\1\0\1\100\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\5\0\1\73\17\0\11\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\7\0\1\34\7\0\1\34"+
    "\5\0\6\17\1\51\2\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\6\0\1\74\16\0\2\17\1\101\6\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\12\0\1\75"+
    "\12\0\4\17\1\102\4\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\1\103\20\0\1\103\11\0\1\104"+
    "\4\0\2\105\2\106\2\107\6\0\2\110\42\0\2\111"+
    "\34\0\1\112\16\0\1\112\44\0\1\112\12\0\4\17"+
    "\1\113\4\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\5\0\1\114\20\0\1\114\42\0\1\114\17\0\1\17"+
    "\1\115\7\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\46\0\2\116\54\0\2\117\47\0\11\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\116\1\120"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\25\0\11\17\1\0\1\17"+
    "\1\117\1\121\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\6\0\1\122\20\0\1\122"+
    "\76\0\2\73\102\0\2\123\14\0\1\124\62\0\1\74"+
    "\16\0\1\74\37\0\1\122\16\0\2\17\1\125\6\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\25\0\11\17"+
    "\1\0\1\17\1\0\1\17\1\73\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\25\0\11\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\123\1\126\14\0\1\124"+
    "\10\0\11\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\13\0\1\74\11\0\5\17\1\101\3\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\13\0\1\127\16\0\1\127"+
    "\37\0\1\130\20\0\1\130\43\0\1\131\7\0\1\131"+
    "\13\0\1\131\43\0\1\132\16\0\1\132\44\0\1\133"+
    "\16\0\1\133\75\0\2\134\70\0\2\135\23\0\1\136"+
    "\16\0\1\136\44\0\1\136\11\0\5\17\1\137\3\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\11\0\1\140"+
    "\6\0\1\140\13\0\1\140\40\0\1\140\6\0\1\140"+
    "\4\0\7\17\1\141\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\12\0\1\142\16\0\1\142\72\0\2\143"+
    "\34\0\1\142\12\0\4\17\1\144\4\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\25\0\11\17\1\0\1\17"+
    "\1\143\1\145\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\7\0\1\74\4\0\1\124"+
    "\2\0\1\74\13\0\1\74\43\0\1\73\16\0\1\73"+
    "\46\0\1\146\55\0\1\74\4\0\1\124\2\0\1\74"+
    "\5\0\6\17\1\101\2\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\13\0\1\73\11\0\11\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\37\0\1\147\32\0\1\150"+
    "\20\0\1\150\47\0\1\151\16\0\1\151\107\0\2\152"+
    "\11\0\1\55\20\0\1\55\42\0\1\153\20\0\1\153"+
    "\74\0\1\154\31\0\1\123\20\0\1\123\42\0\1\123"+
    "\17\0\1\17\1\126\7\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\60\0\2\155\27\0\11\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\155\1\156\1\0\1\17\13\0\1\157\16\0\1\157"+
    "\44\0\1\157\11\0\5\17\1\160\3\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\15\0\1\161\110\0\2\162"+
    "\33\0\1\163\16\0\1\163\77\0\2\164\60\0\2\165"+
    "\24\0\1\166\20\0\1\166\100\0\2\167\56\0\2\170"+
    "\47\0\11\17\1\0\1\17\1\170\1\171\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\62\0\2\34\25\0\11\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\34\1\51\4\0\3\172\1\0\1\172\1\0\10\172"+
    "\3\0\37\172\13\0\1\173\16\0\1\173\71\0\2\174"+
    "\60\0\1\175\40\0\1\176\16\0\1\176\75\0\2\133"+
    "\23\0\1\177\20\0\1\177\44\0\1\73\7\0\1\73"+
    "\13\0\1\73\37\0\1\73\7\0\1\73\5\0\11\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\3\200"+
    "\1\0\1\200\1\0\2\200\1\172\1\200\1\172\3\200"+
    "\3\0\37\200\46\0\2\55\56\0\2\55\57\0\1\201"+
    "\33\0\1\133\7\0\1\133\13\0\1\133\34\0\1\55"+
    "\20\0\1\55\106\0\2\202\25\0\1\203\16\0\1\203"+
    "\71\0\2\133\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\26\1\7\0\1\1\1\0\1\11\3\0"+
    "\7\1\1\11\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\3\0\1\11\2\0\5\1\10\0\1\1"+
    "\1\0\1\1\2\0\2\1\3\0\2\1\10\0\1\1"+
    "\1\0\1\1\1\11\1\0\2\1\10\0\1\1\1\0"+
    "\1\1\3\0\1\1\4\0\1\1\6\0\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CURLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CURLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BASIC_STRING;
            } 
            // fall through
          case 10: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 11: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 12: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 13: break;
          case 5: 
            { return QUOTED_STRING;
            } 
            // fall through
          case 14: break;
          case 6: 
            { return OPTION;
            } 
            // fall through
          case 15: break;
          case 7: 
            { return METHOD;
            } 
            // fall through
          case 16: break;
          case 8: 
            { return CURL;
            } 
            // fall through
          case 17: break;
          case 9: 
            { return URL;
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
